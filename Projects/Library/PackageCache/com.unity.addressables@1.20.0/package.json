{
  "name": "com.unity.addressables",
  "displayName": "Addressables",
  "version": "1.20.0",
  "unity": "2019.4",
  "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
  "keywords": [
    "asset",
    "resources",
    "bundle",
    "bundles",
    "assetbundles"
  ],
  "dependencies": {
    "com.unity.scriptablebuildpipeline": "1.19.6",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
  },
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
    "type": "git",
    "revision": "62eeddf260866c0c536e22d7d95da54080ecf0a8"
  },
  "_upm": {
    "changelog": "- Added ability to get the download size of a given Content Catalog by its resource location\r\n- Add option to save the bundle build layout report as a json or txt file in the Preferences window.\r\n- Added sample for resolving duplicate dependencies to multiple groups.\r\n- AddressableAssetProfileSettings.GetProfileDataById and AddressableAssetProfileSettings.GetProfileDataByName public\r\n- Added ability to load scenes using SceneLoadParameters through Addressables API.\r\n- Made the following API public:\r\n  - AsyncOperationHandle.IsWaitingForCompletion\r\n  - AssetBundleResource.LoadType\r\n  - AssetBundleResource.GetLoadInfo()\r\n  - AssetBundleResource.GetAssetPreloadRequest()\r\n  - AssetBundleResource.Start()\r\n  - AssetBundleResource.Unload()\r\n  - WebRequestQueueOperation.Result\r\n  - WebRequestQueueOperation.OnComplete\r\n  - WebRequestQueueOperation.IsDone\r\n  - WebRequestQueueOperation.WebRequest\r\n  - WebRequestQueueOperation.ctor()\r\n  - WebRequestQueue.SetMaxConcurrentWebRequests()\r\n  - WebRequestQueue.QueueRequest()\r\n  - WebRequestQueue.WaitForRequestToBeActive()\r\n  - ResourceManagerConfig.ExtractKeyAndSubKey()\r\n  - UnityWebRequestUtilities.RequestHasErrors()\r\n  - UnityWebRequestUtilities.IsAssetBundleDownloaded()\r\n  - UnityWebRequestResult.Error.set\r\n  - UnityWebRequestResult.ShouldRetryDownloadError\r\n- Made the following API protected:\r\n  - AssetBundleProvider.UnloadingBundles.get\r\n  - AsyncOperationBase.ReferenceCount\r\n  - AsyncOperationBase.IncrementReferenceCount\r\n  - AsyncOperationBase.DecrementReferenceCount\r\n- Added functionality to extend groups window build menu with pre and post build methods\r\n- Fixed issue where custom analyze rules that are subclasses cannot be registered.\r\n- Added more tooltips to UI\r\n- Fixed issue where loading assets using a Location without initialising first would not initialise Addressables.\r\n- Content Update workflow has been changed to be more streamlined.  New settings have been added to handle Content Update and the previous state .bin file can now be automatically loaded instead of requiring manual selection.\r\n- Set default max concurrent Web requests value to 3.\r\n- Pre-cache delegate list for Completed and CompletedTypeless to reduce GC allocation.\r\n- Fixed issue where Scenes can be incorrectly reported as being in multiple bundles with Bundle Layout Preview analyze rule\r\n- Fixed bug where requests for a ResourceLocation that pointed to a scene in an Addressable folder wasn't returning the location\r\n- Fixed issue where content update could fail to update built-in shaders and monoscript bundles to load from the correct location.\r\n- Cache results of FindEntry to improve performance when no changes are made.\r\n- Fixed an issue where the AddressableAssetEntry returned by GetFolderSubEntry would not include the labels of the entry\r\n- Fixed issue where inherited fast mode scripts would fail to use instance and scene providers set for that build script object.\r\n- Fixed issue where multiple AssetReferences could not be dragged and dropped to a list or array.\r\n- Improved performance when deleting Addressable Asset Groups."
  },
  "upmCi": {
    "footprint": "edf075b68ae4bd768ddec0aefa480355db958991"
  },
  "samples": [
    {
      "displayName": "Addressables Utility",
      "description": "This sample contains a set of utility functions for Addressables.",
      "path": "Samples~/AddressablesUtility"
    },
    {
      "displayName": "ComponentReference",
      "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
      "path": "Samples~/ComponentReference"
    },
    {
      "displayName": "Custom Analyze Rules",
      "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
      "path": "Samples~/CustomAnalyzeRules"
    },
    {
      "displayName": "Custom Build and Playmode Scripts",
      "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
      "path": "Samples~/CustomBuildAndPlaymodeScripts"
    },
    {
      "displayName": "Disable AssetImport on Build",
      "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
      "path": "Samples~/DisableAssetImportOnBuild"
    },
    {
      "displayName": "Import Groups Tool",
      "description": "A tool that imports group assets (for example from a custom package) to the current project.",
      "path": "Samples~/ImportExistingGroup"
    },
    {
      "displayName": "Prefab Spawner",
      "description": "A basic script that instantiates and destroys a prefab AssetReference.",
      "path": "Samples~/PrefabSpawner"
    }
  ]
}
